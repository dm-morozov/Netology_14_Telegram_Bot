import telebot
from pathlib import Path
from telebot import types
from random import shuffle, choice
from telebot.handler_backends import State, StatesGroup
from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from time import sleep

from sqlalchemy import create_engine, Column, Integer, String, Text, Date, ForeignKey, func
from sqlalchemy.orm import declarative_base, relationship, sessionmaker
from models import Base, create_tables, drop_tables, fill_words, Users, Words, UserWords


DSN = 'postgresql://postgres:20145@localhost:5432/learning_English'
engine = create_engine(DSN)

Base = declarative_base()

Session = sessionmaker(bind = engine)
session = Session()



print('–¢–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...')

# –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç StateMemoryStorage –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
state_storage = StateMemoryStorage()

def setup_method_telegram_token():
    file_path = Path('.').absolute().joinpath('token_telegram_bot.txt')
    with open(file_path, 'r') as file:
        return file.read().strip()


bot = telebot.TeleBot(setup_method_telegram_token(), state_storage=state_storage)


class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'
    START = '/start'
    DEFAULT_BUTTONS = [types.KeyboardButton(item) for item in [ADD_WORD, DELETE_WORD, NEXT]]


class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()

def getting_other_words(message, data, markup):

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    target_word = data['target_word']
    word = session.query(Words).filter(Words.target_word == target_word).first()


    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —Å–ª–æ–≤ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
    other_user_words = session.query(UserWords).filter(UserWords.user_id == message.from_user.id, word.id != UserWords.word_id).all()
    
    if len(other_user_words) < 3:
        markup.add(*Command.DEFAULT_BUTTONS)
        bot.send_message(message.chat.id, "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 4.", reply_markup=markup)
        return
    
    other_words = [session.query(Words).filter(user_word.word_id == Words.id).first() for user_word in other_user_words[:3]]
    # print([f"{words_other.target_word} : {words_other.russian_word}" for words_other in other_words])


    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
    answers = [word.target_word] + [words_other.target_word for words_other in other_words]
    shuffle(answers)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞
    buttons = [types.KeyboardButton(answer) for answer in answers]
    buttons.extend(Command.DEFAULT_BUTTONS)
    markup.add(*buttons)

    bot.send_message(message.chat.id, f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ: *{word.russian_word}*", 
                     reply_markup=markup, parse_mode='Markdown')
    # print(message.from_user)
    # print(f"{message.from_user.first_name} (–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ: {word.russian_word}")
    
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = word.target_word
        data['translate_word'] = word.russian_word
        data['other_words'] = [other_word.target_word for other_word in other_words]


def get_random_word(message):
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∏–∑–º–µ–Ω—è–µ–º—ã–º —Ä–∞–∑–º–µ—Ä–æ–º –∏ 2 –∫–Ω–æ–ø–∫–∞–º–∏ –≤ —Ä—è–¥
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    global buttons
    buttons = []

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_words = session.query(UserWords).filter(UserWords.user_id == message.from_user.id).all()
    
    if not user_words:
        bot.send_message(message.chat.id, "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã UserWords
    random_user_word = choice(user_words)

    # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –¥–æ—Å—Ç–∞–µ–º —Å–ª–æ–≤–æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Words –ø–æ id
    word = session.query(Words).filter(Words.id == random_user_word.word_id).first()
    print('word:', word)
    if not word:
        bot.send_message(message.chat.id, "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —Å–ª–æ–≤ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
    getting_other_words(message, {"target_word": word.target_word, "translate_word": word.russian_word}, markup)



@bot.message_handler(commands=['cards', 'start'])
def start_bot(message):

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
    user = session.query(Users).filter(Users.id == message.from_user.id).first()
    # print(user, message.from_user.id)
    print(message)    
    if user is None:
        user = Users(
            id = message.from_user.id,
            username = message.from_user.username,
            first_name = message.from_user.first_name,
            last_name = message.from_user.last_name,
            chat_id = message.chat.id
        )
        session.add(user)
        session.commit()
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username}({user.id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")

        fill_words(session, user.id)

    # print('–°–æ–æ–±—â–µ–Ω–∏–µ', user.id, user.chat_id)
    
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.first_name} ü•≥ \n\n–ü—Ä–µ–¥–ª–∞–≥–∞—é —Å—ã–≥—Ä–∞—Ç—å –≤ —É–≥–∞–¥–∞–π —Å–ª–æ–≤–æ ü§ò ü§©")

    get_random_word(message)


@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:")
    bot.register_next_step_handler(message, process_add_word_step1)

def process_add_word_step1(message):
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
    english_word = message.text.strip()
  
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ '{english_word}' –Ω–∞ —Ä—É—Å—Å–∫–æ–º:")
    bot.register_next_step_handler(message, process_add_word_step2, english_word)


def process_add_word_step2(message, english_word):
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    russian_word = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —ç—Ç–æ —Å–ª–æ–≤–æ –≤ –±–∞–∑–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    existing_word = session.query(UserWords).join(Words).filter(
        UserWords.user_id == message.from_user.id,
        Words.target_word == english_word
    ).first()


    if existing_word:
        bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ '{english_word}' —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        new_word = Words(target_word=english_word, russian_word=russian_word)
        session.add(new_word)
        session.commit()
        
        # –°–≤—è–∑—ã–≤–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        new_user_word = UserWords(user_id=message.from_user.id, word_id=new_word.id)
        session.add(new_user_word)
        session.commit()

        bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ '{english_word}' —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º '{russian_word}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")


@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def handle_delete_word(message):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_words = session.query(UserWords).filter(UserWords.user_id == message.from_user.id).all()

    if not user_words:
        bot.send_message(message.chat.id, "–í –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ —Å–ª–æ–≤ –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        buttons = [types.KeyboardButton(word.word.target_word) for word in user_words]
        markup.add(*buttons)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
        bot.register_next_step_handler(message, process_delete_word)


def process_delete_word(message):

    word_to_delete = message.text.strip()
    word = session.query(Words).join(UserWords).filter(
        UserWords.user_id == message.from_user.id,
        Words.target_word == word_to_delete
    ).first()

    user_word = session.query(UserWords).join(Words).filter(
        UserWords.user_id == message.from_user.id,
        Words.target_word == word_to_delete
    ).first()

    if word:
        session.delete(word)
        session.delete(user_word)
        session.commit()
        bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ '{word_to_delete}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤.")
    else:
        bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ '{word_to_delete}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ —Å–ª–æ–≤.")

    get_random_word(message)


@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def handle_next_word(message):
    get_random_word(message)


@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    try:
        print(message.from_user.id, message.chat.id)

        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            print('data:', data)
            print('message.text:', message.text, 'target_word:', data['target_word'])
            if message.text == data['target_word']:
                bot.send_message(message.chat.id, f'–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ')
                triger = 0
            elif message.text in data['other_words']:
                triger = 1
                bot.send_message(message.chat.id, f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ üòî –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
                markup=types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                
        if triger == 0:
            get_random_word(message)
        elif triger == 1:
            getting_other_words(message, data, markup)

    except Exception as e:
        print(e)


session.close()


if __name__ == '__main__':
    bot.polling()

    